package {	import flash.display.BitmapData;	import flash.display.Sprite;	import flash.display.SimpleButton;	import flash.events.*;	import flash.geom.Vector3D;	import flash.utils.getTimer;	import flash.text.*;	import flash.filesystem.StorageVolumeInfo;	import flash.net.URLLoader;	import flash.net.URLRequest;	import away3d.containers.*;	import away3d.entities.*;	import away3d.materials.TextureMaterial;	import away3d.primitives.*;	import away3d.textures.BitmapTexture;	/*---------------------------------------------------------------------	Away3DによるWWW可視化、検索エンジンにぶん投げた時の距離可視化（予定）	@author legnoh	---------------------------------------------------------------------*/	public class Main extends View3D {				private var view:View3D;		private var text_field:TextField;		private var title_field:TextField;		private var disc_field:TextField;		private var format:TextFormat;		private var titleFmt:TextFormat;		private var discFmt:TextFormat;		private var up:State;		private var over:State;		private var qName:QName;		private var yahooXML:XML;		private var starPoints:Array;		public function Main():void {			/****ここから検索ボックス、検索結果の文章表示部まわりの描画****/			text_field = new TextField();			title_field = new TextField();			disc_field = new TextField();			format = new TextFormat();			titleFmt = new TextFormat();			discFmt = new TextFormat();			yahooXML = new XML();			starPoints = new Array();			up = new State(0x0,stage.stageWidth*0.2);			over = new State(0xFF4500,stage.stageWidth*0.2);			starPoints = new Array();									//検索ボックス、ボタン、結果表示部の２行をステージに乗せる			stage.addChild(text_field);			stage.addChild(title_field);			stage.addChild(disc_field);			makeButton();						//フォーマット定義			setSearchBoxFormat(format);			setTitleFormat(titleFmt,"http://yahoo.co.jp");			setDiscriptionFormat(discFmt,"http://yahoo.co.jp");						//デフォルトフォーマットに設定			text_field.defaultTextFormat = format;			title_field.defaultTextFormat = titleFmt;			disc_field.defaultTextFormat = discFmt;						//それぞれのスタイル定義			setSearchBoxStyle(text_field);			setTitleStyle(title_field);			setDiscriptionStyle(disc_field);									/****ここからAway3D系の処理****/			backgroundColor=0xFFFFFF;// 背景を白色に			camera.lens.far=10000;// 遠くも見えるように設定						//★の点をStarクラスから貰ってきて描画			starPoints = makeStar(400,0);						//★のエッジを描く			drawEdge(starPoints[0],starPoints[1],0);			drawEdge(starPoints[2],starPoints[3],0);			drawEdge(starPoints[4],starPoints[5],0);			drawEdge(starPoints[6],starPoints[7],0);			drawEdge(starPoints[8],starPoints[9],0);						//エッジを描く			//drawEdge(0,0,0);						//ついでにノードを描く			drawNode(0,0,0,starPoints[0],starPoints[1],0);			drawNode(0,0,0,starPoints[2],starPoints[3],0);			drawNode(0,0,0,starPoints[4],starPoints[5],0);			drawNode(0,0,0,starPoints[6],starPoints[7],0);			drawNode(0,0,0,starPoints[8],starPoints[9],0);			// 地面を作成			var plane:WireframeGrid=new WireframeGrid(30,6000,3,0xEEEEEE);			plane.y=-800;			scene.addChild(plane);			addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}		/**view3D空間のレンダリングを行う*/		private function enterFrameHandler(e:Event):void {			camera.x = 0;			camera.z = 2000;			camera.y = 0			camera.lookAt(new Vector3D(0, 0, 0));			render();		}		/**検索ボックスのスタイルを定義する*/		public function setSearchBoxStyle(txt:TextField) {			txt.x=18;// x 座標			txt.y=18;// y 座標			txt.width = stage.stageWidth * 0.7;// 幅			txt.height=100;// 高さ			txt.type=TextFieldType.INPUT;// テキストフィールドのタイプ			txt.antiAliasType=AntiAliasType.ADVANCED;// アンチエイリアスの種類			txt.autoSize=TextFieldAutoSize.NONE;// サイズ整形の種類			txt.background=false;			//txt.backgroundColor=0x111111;			txt.border=true;// 境界線があるか？			txt.borderColor=0x0F0F0F;// 境界線の色			txt.condenseWhite=false;// HTML表示時にスペース改行などを削除するか？			txt.gridFitType=GridFitType.NONE;// グリッドフィッティングの種類			txt.multiline=false;// 複数行か？			txt.selectable=true;// 選択可能か？			txt.sharpness=0;// 文字エッジのシャープネス			txt.thickness=1;// 文字エッジの太さ			txt.useRichTextClipboard=false;// コピペ時に書式もコピーするか？			txt.wordWrap=false;// 折り返すか？			txt.text="java";		}		/**検索ボックスのフォーマットを定義する*/		public function setSearchBoxFormat(fmt:TextFormat) {			fmt.align = TextFormatAlign.LEFT;// 整列			fmt.font  = "MotoyaLMaru";			fmt.size  = 85;// 文字のポイントサイズ			fmt.color = 0x0E0E0E;// 文字の色			fmt.kerning = true;// カーニングが有効か？（埋め込みフォント時のみ動作）		}				/**検索結果のタイトル表示スタイルを定義する*/		public function setTitleStyle(txt:TextField) {			txt.x=5;// x 座標			txt.y=772;// y 座標			txt.width = stage.stageWidth * 0.7;// 幅			txt.height=100;// 高さ			txt.type=TextFieldType.DYNAMIC;// テキストフィールドのタイプ			txt.antiAliasType=AntiAliasType.ADVANCED;// アンチエイリアスの種類			txt.autoSize=TextFieldAutoSize.NONE;// サイズ整形の種類			txt.condenseWhite=false;// HTML表示時にスペース改行などを削除するか？			txt.gridFitType=GridFitType.NONE;// グリッドフィッティングの種類			txt.multiline=false;// 複数行か？			txt.selectable=true;// 選択可能か？			txt.sharpness=0;// 文字エッジのシャープネス			txt.thickness=1;// 文字エッジの太さ			txt.useRichTextClipboard=false;// コピペ時に書式もコピーするか？			txt.wordWrap=false;// 折り返すか？			txt.text="Title";		}				/**検索結果のタイトル表示フォーマットを定義する*/		public function setTitleFormat(fmt:TextFormat,uri:String) {						fmt.align = TextFormatAlign.LEFT;// 整列			fmt.font  = "MotoyaLMaru";			fmt.bold  = true;			fmt.underline = true; // アンダーラインを表示するか？			fmt.size  = 40;// 文字のポイントサイズ			fmt.color = 0xFF0000;// 文字の色			fmt.kerning = true;// カーニングが有効か？（埋め込みフォント時のみ動作）			fmt.url = uri; // ハイパーリンク先を文字列で指定			fmt.target = null; // ハイパーリンク先のターゲットウィンドウ						//title_field.setTextFormat(fmt);		}				/**検索結果のディスクリプション表示スタイルを定義する*/		public function setDiscriptionStyle(txt:TextField) {			txt.x=5;// x 座標			txt.y=814;// y 座標			txt.width = stage.stageWidth;			txt.height=100;			txt.type = TextFieldType.DYNAMIC;			txt.antiAliasType=AntiAliasType.ADVANCED; // アンチエイリアスの種類			txt.alwaysShowSelection = true; // フォーカスが無くなっても選択状態を維持するか？ 			txt.condenseWhite = false; // HTML表示時にスペース改行などを削除するか？			txt.multiline = false; // 複数行か？			txt.selectable = true; // 選択可能か？			txt.textColor = 0x000000; // テキストの色			txt.autoSize = TextFieldAutoSize.LEFT;			txt.useRichTextClipboard = false; // コピペ時に書式もコピーするか？			txt.wordWrap = false; // 折り返すか？			txt.text="Discription";		}				/**検索結果のディスクリプション表示フォーマットを定義する*/		public function setDiscriptionFormat(fmt:TextFormat,uri:String) {			fmt.align = TextFormatAlign.LEFT; // 整列			fmt.font  = "MotoyaLMaru";			fmt.size = 35; // 文字サイズ			fmt.color = 0x000000; // 文字の色			fmt.underline = true; // アンダーラインを表示するか？			fmt.kerning = true; // カーニング有効			fmt.url = uri; // ハイパーリンク先を文字列で指定			fmt.target = null; // ハイパーリンク先のターゲットウィンドウ						//disc_field.setTextFormat (fmt);		}				/**検索ボタンを作る*/		public function makeButton(){			var btn:SimpleButton = new SimpleButton();						btn.upState = up;			btn.downState = over;			btn.overState = up;			btn.hitTestState = up;			btn.x = 360;			btn.y = 18;			btn.addEventListener(MouseEvent.CLICK,onButtonPush);			stage.addChild(btn);		}				//★の座標を作って返すメソッド		public function makeStar(rad:int,grad:int){		var pai = Math.PI; // 円周率		var starPoint:Array = []; //xy座標を交互に入れた配列				//1つ目の座標		starPoint.push(rad * Math.cos(grad));		starPoint.push(rad * Math.sin(grad));				//2つ目の座標		starPoint.push(rad * Math.cos(0.4*pai + grad));		starPoint.push(rad * Math.sin(0.4*pai + grad));				//3つ目の座標		starPoint.push(rad * Math.cos(0.8*pai + grad));		starPoint.push(rad * Math.sin(0.8*pai + grad));				//4つ目の座標		starPoint.push(rad * Math.cos(1.2*pai + grad));		starPoint.push(rad * Math.sin(1.2*pai + grad));				//5つ目の座標		starPoint.push(rad * Math.cos(1.6*pai + grad));		starPoint.push(rad * Math.sin(1.6*pai + grad));				return starPoint;	}				/**Yahoo!検索をネットワーク越しにぶん投げて結果をXMLで受け取る*/		private function onButtonPush(e:MouseEvent):void {						default xml namespace = new Namespace("urn:yahoo:jp:srch");						//URLを作る			var yahooUrl = "http://search.yahooapis.jp/PremiumWebSearchService/V1/webSearch?appid=LFTNFXWxg66eYMmIvFGGF1qZLo8V8HMPgqMou_HBPPhe4p5LSNCf.lkFBRjKNtE-&query=" + text_field.text;						//XMLを読み込んで格納(URLLoader+URLRequest)			var loader:URLLoader = new URLLoader();			var request:URLRequest=new URLRequest(yahooUrl);			loader.addEventListener(Event.COMPLETE,function(event:Event) {													//XMLから名前空間を削除				yahooXML = new XML(event.target.data).removeNamespace("http://www.w3.org/2001/XMLSchema-instance");								//タイトル部分を検索１番目のものに変更・フォーマット上書き				title_field.text = yahooXML.Result[0].Title;				setTitleFormat(titleFmt,yahooXML.Result[0].Url);								//Summary部分も同様に変更・フォーマット上書き				disc_field.text = yahooXML.Result[0].Summary;				setDiscriptionFormat(discFmt,yahooXML.Result[0].Url);								//テキストフォーマットに設定し直す				title_field.setTextFormat(titleFmt);				disc_field.setTextFormat (discFmt);								//検索結果に対応するノードを描画する				drawEdge(starPoints[0],starPoints[1],-100);				drawEdge(starPoints[0],starPoints[1],-200);				drawEdge(starPoints[0],starPoints[1],-300);				drawEdge(starPoints[0],starPoints[1],-400);				drawEdge(starPoints[0],starPoints[1],-500);				drawEdge(starPoints[0],starPoints[1],-600);				drawEdge(starPoints[0],starPoints[1],-700);				drawEdge(starPoints[0],starPoints[1],-800);				drawEdge(starPoints[0],starPoints[1],-900);				drawEdge(starPoints[0],starPoints[1],-1000);			});			loader.load(request);		}		/**指定した２つのScene3D地点間にノードを描画する*/		public function drawNode(x:int,y:int,z:int,x2:int,y2:int,z2:int) {						//引数で貰った2点間にラインを引く			var lines:SegmentSet = new SegmentSet();			scene.addChild(lines);			lines.addSegment(new LineSegment(new Vector3D(x,y,z),new Vector3D(x2,y2,z2),0xEEEEEE,0xEEEEEE,4));		}		/**指定したScene3D地点上にエッジを描画する*/		public function drawEdge(x:int,y:int,z:int) {						[Embed(source="star.png")]			var ImageCls:Class;// 星の画像						//画像を表示			var bmd:BitmapData = new ImageCls().bitmapData;			var texture:BitmapTexture=new BitmapTexture(bmd);			var material:TextureMaterial=new TextureMaterial(texture);			material.alphaBlending=true;						//ビルボード処理			var sprite3D:Sprite3D=new Sprite3D(material,200,200);			scene.addChild(sprite3D);			sprite3D.x = x;			sprite3D.y = y;			sprite3D.z = z;		}	}}/**ボタンの色を与えてボタンのデザインを形作るStateクラス*/import flash.display.Sprite;import flash.text.TextField;import flash.text.TextFormat;class State extends Sprite{	public function State(color:int,btnWeight:int)	{		graphics.lineStyle(1.0, color);		graphics.beginFill(0xFFFFFF);		graphics.drawRect(0, 0, btnWeight, 100);		graphics.endFill(); 		var tf:TextField = new TextField();		tf.defaultTextFormat = new TextFormat("_typeWriter", 20, color, true);		tf.text = "検索";		tf.autoSize = "left";		tf.x = (this.width  - tf.width)  / 2;		tf.y = (this.height - tf.height) / 2;		tf.selectable = false;		addChild(tf);	}}